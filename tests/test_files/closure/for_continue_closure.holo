// Test closure capturing loop variable with continue statement
// Python-style behavior: all closures see the same final variable value
var closure0;
var closure1;
var closure3;
var closure4;

for (var i = 0; i < 5; i = i + 1) {
  if (i == 2) {
    continue; // Skip creating closure for i=2
  }
  
  if (i == 0) {
    fun capture0() {
      return i;
    }
    closure0 = capture0;
  }
  
  if (i == 1) {
    fun capture1() {
      return i;
    }
    closure1 = capture1;
  }
  
  if (i == 3) {
    fun capture3() {
      return i;
    }
    closure3 = capture3;
  }
  
  if (i == 4) {
    fun capture4() {
      return i;
    }
    closure4 = capture4;
  }
}

// All closures capture the same variable i
// After loop completes, i=5, so all closures return 5
print closure0(); // expect: 5
print closure1(); // expect: 5
print closure3(); // expect: 5
print closure4(); // expect: 5
